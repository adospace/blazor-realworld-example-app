@page "/register"
@inject HttpClient Http
@inject IUserService UserService
@inject IUriHelper UriHelper

<div class="auth-page">
    <div class="container page">
        <div class="row">

            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="text-xs-center">Sign up</h1>
                <p class="text-xs-center">
                    <a href="/login">Have an account?</a>
                </p>

                @if (HasApiErrors)
                {
                    <ul class="error-messages">
                        @foreach (var errorMessage in Error.errors)
                        {
                            <li>@errorMessage.Key : @string.Join(",", errorMessage.Value)</li>
                        }
                    </ul>
                }

                @if (HasValidationErrors)
                {
                    <ul class="error-messages">
                        @foreach (var errorMessage in LocalErrors)
                        {
                            <li>@errorMessage</li>
                        }
                    </ul>
                }

                <form>
                    <fieldset class="form-group">
                        <input @bind(Username) class="form-control form-control-lg" type="text" placeholder="Your Name">
                    </fieldset>
                    <fieldset class="form-group">
                        <input @bind(Email) class="form-control form-control-lg" type="text" placeholder="Email">
                    </fieldset>
                    <fieldset class="form-group">
                        <input @bind(Password) class="form-control form-control-lg" type="password" placeholder="Password">
                    </fieldset>
                    <button class="btn btn-lg btn-primary pull-xs-right" @onclick(async () => await SignUp())>
                        Sign up
                    </button>
                </form>
            </div>

        </div>
    </div>
</div>

@functions {

    public string Username { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }

    public Models.Error Error { get; set; }
    public bool HasApiErrors => Error != null;

    public string[] LocalErrors { get; set; }
    public bool HasValidationErrors => LocalErrors != null && LocalErrors.Length>0;

    protected override void OnInit()
    {
        base.OnInit();
    }

    private async Task SignUp()
    {

        LocalErrors = FindValidationErrors().ToArray();
        if (HasValidationErrors)
            return;

        try
        {
            Console.WriteLine($"RegisterAsync()...");
            await UserService.RegisterAsync(Email, Username, Password);
            Console.WriteLine($"RegisterAsync() {UserService.CurrentUser != null}");
            if (UserService.CurrentUser != null)
                UriHelper.NavigateTo("/");
        }
        catch (Services.ApiServiceException ex)
        {
            Console.WriteLine($"RegisterAsync() {ex.Error != null} ");
            Error = ex.Error;
        }

        this.StateHasChanged();
    }

    private IEnumerable<string> FindValidationErrors()
    {
        if (string.IsNullOrWhiteSpace(Username))
            yield return "Please enter a username";
        if (string.IsNullOrWhiteSpace(Email) ||
            Email.IndexOf('.') == -1 ||
            Email.Count(_ => _ == '@') != 1)
            yield return "Please enter a valid email address";
        //if (string.IsNullOrWhiteSpace(Password) ||
        //    Password.Trim().Length < 8)
        //    yield return "Please enter a password of at least 5 characters";
    }

}